{"timestamp": "2025-05-09 16:12:37", "request": {"strategy_type": "mean_reversion", "param_ranges": {"overbought": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]}, "metric": "sharpe_ratio", "start_date": null, "end_date": null}}
{"timestamp": "2025-05-09 16:19:23", "request": {"strategy_type": "mean_reversion", "param_ranges": {"oversold": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]}, "metric": "sharpe_ratio", "start_date": null, "end_date": null}}
{"timestamp": "2025-05-09 16:21:37", "request": {"strategy_type": "mean_reversion", "param_ranges": {"overbought": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]}, "metric": "sharpe_ratio", "start_date": null, "end_date": null}}
{"timestamp": "2025-05-09 16:22:00", "request": {"strategy_type": "mean_reversion", "param_ranges": {"overbought": [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99]}, "metric": "sharpe_ratio", "start_date": null, "end_date": null}}

{
  "timestamp": "2025-05-12 17:11:51",
  "strategy_type": "mean_reversion",
  "param_ranges": {
    "overbought": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": null,
  "end_date": null
}

{
  "timestamp": "2025-05-12 17:11:55",
  "strategy_type": "mean_reversion",
  "param_ranges": {
    "overbought": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": null,
  "end_date": null,
  "performance_comparison": {
    "sharpe_ratio": {
      "default": 0.0817,
      "optimized": 0.1756,
      "improvement": "114.84%"
    },
    "total_return_percent": {
      "default": 5.0,
      "optimized": 5.0,
      "improvement": "0.0%"
    },
    "max_drawdown_percent": {
      "default": 10.0,
      "optimized": 10.0,
      "improvement": "0.0%"
    },
    "win_rate_percent": {
      "default": 50.0,
      "optimized": 50.0,
      "improvement": "0.0%"
    }
  },
  "parameter_changes": {
    "overbought": {
      "default": 70,
      "optimized": 49
    }
  },
  "top_results_summary": [
    {
      "rank": 1,
      "params": {
        "overbought": 49
      },
      "score": 0.1756
    },
    {
      "rank": 2,
      "params": {
        "overbought": 37
      },
      "score": 0.1445
    },
    {
      "rank": 3,
      "params": {
        "overbought": 36
      },
      "score": 0.1253
    }
  ]
}

{
  "timestamp": "2025-05-12 17:11:55",
  "strategy_type": "mean_reversion",
  "param_ranges": {
    "overbought": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": null,
  "end_date": null,
  "error": "local variable 'os' referenced before assignment",
  "traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 1247, in run_optimization_task\n    log_optimization_request(\nUnboundLocalError: local variable 'os' referenced before assignment\n"
}

{
  "timestamp": "2025-05-12 17:39:02",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "overbought": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20"
}

{
  "timestamp": "2025-05-12 17:39:05",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "overbought": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20",
  "params_sent_to_optimizer": {
    "overbought": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100
    ]
  },
  "final_params_for_optimized_backtest": {
    "rsi_period": 14,
    "oversold": 30,
    "overbought": 47,
    "exit_middle": 50
  },
  "performance_comparison": {
    "sharpe_ratio": {
      "default": 0.1852,
      "optimized": 0.5034,
      "improvement": "171.88%"
    },
    "total_return_percent": {
      "default": 5.0,
      "optimized": 5.0,
      "improvement": "0.0%"
    },
    "max_drawdown_percent": {
      "default": 10.0,
      "optimized": 10.0,
      "improvement": "0.0%"
    },
    "win_rate_percent": {
      "default": 50.0,
      "optimized": 50.0,
      "improvement": "0.0%"
    }
  },
  "parameter_changes": {
    "overbought": {
      "default": 70,
      "optimized": 47
    }
  },
  "top_results_summary": [
    {
      "rank": 1,
      "params": {
        "overbought": 47
      },
      "score": 0.5034
    },
    {
      "rank": 2,
      "params": {
        "overbought": 41
      },
      "score": 0.4895
    },
    {
      "rank": 3,
      "params": {
        "overbought": 46
      },
      "score": 0.4416
    }
  ]
}

{
  "timestamp": "2025-05-12 17:56:26",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "overbought": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20"
}

{
  "timestamp": "2025-05-12 17:56:30",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "overbought": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20",
  "params_sent_to_optimizer": {
    "overbought": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100
    ]
  },
  "final_params_for_optimized_backtest": {
    "rsi_period": 14,
    "oversold": 30,
    "overbought": 47,
    "exit_middle": 50
  },
  "error": "free variable 'pd' referenced before assignment in enclosing scope",
  "traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 1263, in run_optimization_task\n    default_performance = ensure_metrics_present(default_performance)\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 1243, in ensure_metrics_present\n    if metric not in perf_dict or perf_dict[metric] is None or pd.isna(perf_dict[metric]):\nNameError: free variable 'pd' referenced before assignment in enclosing scope\n"
}

{
  "timestamp": "2025-05-12 17:56:50",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "exit_middle": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20"
}

{
  "timestamp": "2025-05-12 17:56:53",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "exit_middle": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20",
  "params_sent_to_optimizer": {
    "exit_middle": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100
    ]
  },
  "final_params_for_optimized_backtest": {
    "rsi_period": 14,
    "oversold": 30,
    "overbought": 70,
    "exit_middle": 69
  },
  "error": "free variable 'pd' referenced before assignment in enclosing scope",
  "traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 1263, in run_optimization_task\n    default_performance = ensure_metrics_present(default_performance)\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 1243, in ensure_metrics_present\n    if metric not in perf_dict or perf_dict[metric] is None or pd.isna(perf_dict[metric]):\nNameError: free variable 'pd' referenced before assignment in enclosing scope\n"
}

{
  "timestamp": "2025-05-12 17:57:07",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "oversold": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20"
}

{
  "timestamp": "2025-05-12 17:57:10",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "oversold": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20",
  "params_sent_to_optimizer": {
    "oversold": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100
    ]
  },
  "final_params_for_optimized_backtest": {
    "rsi_period": 14,
    "oversold": 67,
    "overbought": 70,
    "exit_middle": 50
  },
  "error": "free variable 'pd' referenced before assignment in enclosing scope",
  "traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 1263, in run_optimization_task\n    default_performance = ensure_metrics_present(default_performance)\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 1243, in ensure_metrics_present\n    if metric not in perf_dict or perf_dict[metric] is None or pd.isna(perf_dict[metric]):\nNameError: free variable 'pd' referenced before assignment in enclosing scope\n"
}

{
  "timestamp": "2025-05-12 17:57:26",
  "strategy_type": "trend_following",
  "param_ranges_request": {
    "fast_ma_period": "100 values from 1 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20"
}

{
  "timestamp": "2025-05-12 17:57:29",
  "strategy_type": "trend_following",
  "param_ranges_request": {
    "fast_ma_period": "100 values from 1 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20",
  "params_sent_to_optimizer": {
    "fast_ma_period": [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100
    ]
  },
  "final_params_for_optimized_backtest": {
    "fast_ma_type": "ema",
    "fast_ma_period": 68,
    "slow_ma_type": "sma",
    "slow_ma_period": 50
  },
  "error": "free variable 'pd' referenced before assignment in enclosing scope",
  "traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 1263, in run_optimization_task\n    default_performance = ensure_metrics_present(default_performance)\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 1243, in ensure_metrics_present\n    if metric not in perf_dict or perf_dict[metric] is None or pd.isna(perf_dict[metric]):\nNameError: free variable 'pd' referenced before assignment in enclosing scope\n"
}

{
  "timestamp": "2025-05-12 17:57:38",
  "strategy_type": "trend_following",
  "param_ranges_request": {
    "slow_ma_period": "500 values from 1 to 500"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20"
}

{
  "timestamp": "2025-05-12 17:57:42",
  "strategy_type": "trend_following",
  "param_ranges_request": {
    "slow_ma_period": "500 values from 1 to 500"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20",
  "params_sent_to_optimizer": {
    "slow_ma_period": [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      124,
      125,
      126,
      127,
      128,
      129,
      130,
      131,
      132,
      133,
      134,
      135,
      136,
      137,
      138,
      139,
      140,
      141,
      142,
      143,
      144,
      145,
      146,
      147,
      148,
      149,
      150,
      151,
      152,
      153,
      154,
      155,
      156,
      157,
      158,
      159,
      160,
      161,
      162,
      163,
      164,
      165,
      166,
      167,
      168,
      169,
      170,
      171,
      172,
      173,
      174,
      175,
      176,
      177,
      178,
      179,
      180,
      181,
      182,
      183,
      184,
      185,
      186,
      187,
      188,
      189,
      190,
      191,
      192,
      193,
      194,
      195,
      196,
      197,
      198,
      199,
      200,
      201,
      202,
      203,
      204,
      205,
      206,
      207,
      208,
      209,
      210,
      211,
      212,
      213,
      214,
      215,
      216,
      217,
      218,
      219,
      220,
      221,
      222,
      223,
      224,
      225,
      226,
      227,
      228,
      229,
      230,
      231,
      232,
      233,
      234,
      235,
      236,
      237,
      238,
      239,
      240,
      241,
      242,
      243,
      244,
      245,
      246,
      247,
      248,
      249,
      250,
      251,
      252,
      253,
      254,
      255,
      256,
      257,
      258,
      259,
      260,
      261,
      262,
      263,
      264,
      265,
      266,
      267,
      268,
      269,
      270,
      271,
      272,
      273,
      274,
      275,
      276,
      277,
      278,
      279,
      280,
      281,
      282,
      283,
      284,
      285,
      286,
      287,
      288,
      289,
      290,
      291,
      292,
      293,
      294,
      295,
      296,
      297,
      298,
      299,
      300,
      301,
      302,
      303,
      304,
      305,
      306,
      307,
      308,
      309,
      310,
      311,
      312,
      313,
      314,
      315,
      316,
      317,
      318,
      319,
      320,
      321,
      322,
      323,
      324,
      325,
      326,
      327,
      328,
      329,
      330,
      331,
      332,
      333,
      334,
      335,
      336,
      337,
      338,
      339,
      340,
      341,
      342,
      343,
      344,
      345,
      346,
      347,
      348,
      349,
      350,
      351,
      352,
      353,
      354,
      355,
      356,
      357,
      358,
      359,
      360,
      361,
      362,
      363,
      364,
      365,
      366,
      367,
      368,
      369,
      370,
      371,
      372,
      373,
      374,
      375,
      376,
      377,
      378,
      379,
      380,
      381,
      382,
      383,
      384,
      385,
      386,
      387,
      388,
      389,
      390,
      391,
      392,
      393,
      394,
      395,
      396,
      397,
      398,
      399,
      400,
      401,
      402,
      403,
      404,
      405,
      406,
      407,
      408,
      409,
      410,
      411,
      412,
      413,
      414,
      415,
      416,
      417,
      418,
      419,
      420,
      421,
      422,
      423,
      424,
      425,
      426,
      427,
      428,
      429,
      430,
      431,
      432,
      433,
      434,
      435,
      436,
      437,
      438,
      439,
      440,
      441,
      442,
      443,
      444,
      445,
      446,
      447,
      448,
      449,
      450,
      451,
      452,
      453,
      454,
      455,
      456,
      457,
      458,
      459,
      460,
      461,
      462,
      463,
      464,
      465,
      466,
      467,
      468,
      469,
      470,
      471,
      472,
      473,
      474,
      475,
      476,
      477,
      478,
      479,
      480,
      481,
      482,
      483,
      484,
      485,
      486,
      487,
      488,
      489,
      490,
      491,
      492,
      493,
      494,
      495,
      496,
      497,
      498,
      499,
      500
    ]
  },
  "final_params_for_optimized_backtest": {
    "fast_ma_type": "ema",
    "fast_ma_period": 20,
    "slow_ma_type": "sma",
    "slow_ma_period": 24
  },
  "error": "free variable 'pd' referenced before assignment in enclosing scope",
  "traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 1263, in run_optimization_task\n    default_performance = ensure_metrics_present(default_performance)\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 1243, in ensure_metrics_present\n    if metric not in perf_dict or perf_dict[metric] is None or pd.isna(perf_dict[metric]):\nNameError: free variable 'pd' referenced before assignment in enclosing scope\n"
}

{
  "timestamp": "2025-05-12 18:01:57",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "oversold": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20"
}

{
  "timestamp": "2025-05-12 18:02:00",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "oversold": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20",
  "params_sent_to_optimizer": {
    "oversold": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100
    ]
  },
  "final_params_for_optimized_backtest": {
    "rsi_period": 14,
    "oversold": 67,
    "overbought": 70,
    "exit_middle": 50
  },
  "error": "free variable 'pd' referenced before assignment in enclosing scope",
  "traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 1263, in run_optimization_task\n    try:\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 1243, in ensure_metrics_present\n    \"comparison_chart_html\": chart_html\nNameError: free variable 'pd' referenced before assignment in enclosing scope\n"
}

{
  "timestamp": "2025-05-12 18:06:13",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "oversold": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20"
}

{
  "timestamp": "2025-05-12 18:06:16",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "oversold": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20",
  "params_sent_to_optimizer": {
    "oversold": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100
    ]
  },
  "final_params_for_optimized_backtest": {
    "rsi_period": 14,
    "oversold": 67,
    "overbought": 70,
    "exit_middle": 50
  },
  "error": "free variable 'pd' referenced before assignment in enclosing scope",
  "traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 1263, in run_optimization_task\n    # 7. Save results as before\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 1243, in ensure_metrics_present\n    \"optimized_params\": final_optimized_params,\nNameError: free variable 'pd' referenced before assignment in enclosing scope\n"
}

{
  "timestamp": "2025-05-12 18:09:11",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "oversold": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20"
}

{
  "timestamp": "2025-05-12 18:09:15",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "oversold": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20",
  "params_sent_to_optimizer": {
    "oversold": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100
    ]
  },
  "final_params_for_optimized_backtest": {
    "rsi_period": 14,
    "oversold": 67,
    "overbought": 70,
    "exit_middle": 50
  },
  "performance_comparison": {
    "sharpe_ratio": {
      "default": 0.1852,
      "optimized": 0.3709,
      "improvement": "100.3%"
    },
    "total_return_percent": {
      "default": 5.0,
      "optimized": 5.0,
      "improvement": "0.0%"
    },
    "max_drawdown_percent": {
      "default": 10.0,
      "optimized": 10.0,
      "improvement": "0.0%"
    },
    "win_rate_percent": {
      "default": 50.0,
      "optimized": 50.0,
      "improvement": "0.0%"
    }
  },
  "parameter_changes": {
    "oversold": {
      "default": 30,
      "optimized": 67
    }
  },
  "top_results_summary": [
    {
      "rank": 1,
      "params": {
        "oversold": 67
      },
      "score": 0.3709
    },
    {
      "rank": 2,
      "params": {
        "oversold": 69
      },
      "score": 0.3604
    },
    {
      "rank": 3,
      "params": {
        "oversold": 68
      },
      "score": 0.351
    }
  ]
}

{
  "timestamp": "2025-05-12 18:09:22",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "overbought": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20"
}

{
  "timestamp": "2025-05-12 18:09:25",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "overbought": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20",
  "params_sent_to_optimizer": {
    "overbought": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100
    ]
  },
  "final_params_for_optimized_backtest": {
    "rsi_period": 14,
    "oversold": 30,
    "overbought": 47,
    "exit_middle": 50
  },
  "performance_comparison": {
    "sharpe_ratio": {
      "default": 0.1852,
      "optimized": 0.5034,
      "improvement": "171.88%"
    },
    "total_return_percent": {
      "default": 5.0,
      "optimized": 5.0,
      "improvement": "0.0%"
    },
    "max_drawdown_percent": {
      "default": 10.0,
      "optimized": 10.0,
      "improvement": "0.0%"
    },
    "win_rate_percent": {
      "default": 50.0,
      "optimized": 50.0,
      "improvement": "0.0%"
    }
  },
  "parameter_changes": {
    "overbought": {
      "default": 70,
      "optimized": 47
    }
  },
  "top_results_summary": [
    {
      "rank": 1,
      "params": {
        "overbought": 47
      },
      "score": 0.5034
    },
    {
      "rank": 2,
      "params": {
        "overbought": 41
      },
      "score": 0.4895
    },
    {
      "rank": 3,
      "params": {
        "overbought": 46
      },
      "score": 0.4416
    }
  ]
}

{
  "timestamp": "2025-05-12 18:09:33",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "oversold": "101 values from 0 to 100",
    "overbought": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20"
}

{
  "timestamp": "2025-05-12 18:09:58",
  "strategy_type": "mean_reversion",
  "param_ranges_request": {
    "oversold": "101 values from 0 to 100",
    "overbought": "101 values from 0 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20",
  "params_sent_to_optimizer": {
    "oversold": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100
    ],
    "overbought": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100
    ]
  },
  "final_params_for_optimized_backtest": {
    "rsi_period": 14,
    "oversold": 70,
    "overbought": 85,
    "exit_middle": 50
  },
  "performance_comparison": {
    "sharpe_ratio": {
      "default": 0.1852,
      "optimized": 1.0701,
      "improvement": "477.9%"
    },
    "total_return_percent": {
      "default": 5.0,
      "optimized": 5.0,
      "improvement": "0.0%"
    },
    "max_drawdown_percent": {
      "default": 10.0,
      "optimized": 10.0,
      "improvement": "0.0%"
    },
    "win_rate_percent": {
      "default": 50.0,
      "optimized": 50.0,
      "improvement": "0.0%"
    }
  },
  "parameter_changes": {
    "overbought": {
      "default": 70,
      "optimized": 85
    },
    "oversold": {
      "default": 30,
      "optimized": 70
    }
  },
  "top_results_summary": [
    {
      "rank": 1,
      "params": {
        "oversold": 70,
        "overbought": 85
      },
      "score": 1.0701
    },
    {
      "rank": 2,
      "params": {
        "oversold": 70,
        "overbought": 41
      },
      "score": 1.0526
    },
    {
      "rank": 3,
      "params": {
        "oversold": 70,
        "overbought": 88
      },
      "score": 1.0519
    }
  ]
}

{
  "timestamp": "2025-05-12 18:10:14",
  "strategy_type": "trend_following",
  "param_ranges_request": {
    "fast_ma_period": "100 values from 1 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20"
}

{
  "timestamp": "2025-05-12 18:10:17",
  "strategy_type": "trend_following",
  "param_ranges_request": {
    "fast_ma_period": "100 values from 1 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20",
  "params_sent_to_optimizer": {
    "fast_ma_period": [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100
    ]
  },
  "final_params_for_optimized_backtest": {
    "fast_ma_type": "ema",
    "fast_ma_period": 68,
    "slow_ma_type": "sma",
    "slow_ma_period": 50
  },
  "performance_comparison": {
    "sharpe_ratio": {
      "default": 0.5063,
      "optimized": 0.841,
      "improvement": "66.09%"
    },
    "total_return_percent": {
      "default": 5.0,
      "optimized": 5.0,
      "improvement": "0.0%"
    },
    "max_drawdown_percent": {
      "default": 10.0,
      "optimized": 10.0,
      "improvement": "0.0%"
    },
    "win_rate_percent": {
      "default": 50.0,
      "optimized": 50.0,
      "improvement": "0.0%"
    }
  },
  "parameter_changes": {
    "fast_ma_period": {
      "default": 20,
      "optimized": 68
    }
  },
  "top_results_summary": [
    {
      "rank": 1,
      "params": {
        "fast_ma_period": 68
      },
      "score": 0.841
    },
    {
      "rank": 2,
      "params": {
        "fast_ma_period": 70
      },
      "score": 0.7908
    },
    {
      "rank": 3,
      "params": {
        "fast_ma_period": 69
      },
      "score": 0.7796
    }
  ]
}

{
  "timestamp": "2025-05-12 18:10:25",
  "strategy_type": "trend_following",
  "param_ranges_request": {
    "slow_ma_period": "500 values from 1 to 500"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20"
}

{
  "timestamp": "2025-05-12 18:10:29",
  "strategy_type": "trend_following",
  "param_ranges_request": {
    "slow_ma_period": "500 values from 1 to 500"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20",
  "params_sent_to_optimizer": {
    "slow_ma_period": [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      124,
      125,
      126,
      127,
      128,
      129,
      130,
      131,
      132,
      133,
      134,
      135,
      136,
      137,
      138,
      139,
      140,
      141,
      142,
      143,
      144,
      145,
      146,
      147,
      148,
      149,
      150,
      151,
      152,
      153,
      154,
      155,
      156,
      157,
      158,
      159,
      160,
      161,
      162,
      163,
      164,
      165,
      166,
      167,
      168,
      169,
      170,
      171,
      172,
      173,
      174,
      175,
      176,
      177,
      178,
      179,
      180,
      181,
      182,
      183,
      184,
      185,
      186,
      187,
      188,
      189,
      190,
      191,
      192,
      193,
      194,
      195,
      196,
      197,
      198,
      199,
      200,
      201,
      202,
      203,
      204,
      205,
      206,
      207,
      208,
      209,
      210,
      211,
      212,
      213,
      214,
      215,
      216,
      217,
      218,
      219,
      220,
      221,
      222,
      223,
      224,
      225,
      226,
      227,
      228,
      229,
      230,
      231,
      232,
      233,
      234,
      235,
      236,
      237,
      238,
      239,
      240,
      241,
      242,
      243,
      244,
      245,
      246,
      247,
      248,
      249,
      250,
      251,
      252,
      253,
      254,
      255,
      256,
      257,
      258,
      259,
      260,
      261,
      262,
      263,
      264,
      265,
      266,
      267,
      268,
      269,
      270,
      271,
      272,
      273,
      274,
      275,
      276,
      277,
      278,
      279,
      280,
      281,
      282,
      283,
      284,
      285,
      286,
      287,
      288,
      289,
      290,
      291,
      292,
      293,
      294,
      295,
      296,
      297,
      298,
      299,
      300,
      301,
      302,
      303,
      304,
      305,
      306,
      307,
      308,
      309,
      310,
      311,
      312,
      313,
      314,
      315,
      316,
      317,
      318,
      319,
      320,
      321,
      322,
      323,
      324,
      325,
      326,
      327,
      328,
      329,
      330,
      331,
      332,
      333,
      334,
      335,
      336,
      337,
      338,
      339,
      340,
      341,
      342,
      343,
      344,
      345,
      346,
      347,
      348,
      349,
      350,
      351,
      352,
      353,
      354,
      355,
      356,
      357,
      358,
      359,
      360,
      361,
      362,
      363,
      364,
      365,
      366,
      367,
      368,
      369,
      370,
      371,
      372,
      373,
      374,
      375,
      376,
      377,
      378,
      379,
      380,
      381,
      382,
      383,
      384,
      385,
      386,
      387,
      388,
      389,
      390,
      391,
      392,
      393,
      394,
      395,
      396,
      397,
      398,
      399,
      400,
      401,
      402,
      403,
      404,
      405,
      406,
      407,
      408,
      409,
      410,
      411,
      412,
      413,
      414,
      415,
      416,
      417,
      418,
      419,
      420,
      421,
      422,
      423,
      424,
      425,
      426,
      427,
      428,
      429,
      430,
      431,
      432,
      433,
      434,
      435,
      436,
      437,
      438,
      439,
      440,
      441,
      442,
      443,
      444,
      445,
      446,
      447,
      448,
      449,
      450,
      451,
      452,
      453,
      454,
      455,
      456,
      457,
      458,
      459,
      460,
      461,
      462,
      463,
      464,
      465,
      466,
      467,
      468,
      469,
      470,
      471,
      472,
      473,
      474,
      475,
      476,
      477,
      478,
      479,
      480,
      481,
      482,
      483,
      484,
      485,
      486,
      487,
      488,
      489,
      490,
      491,
      492,
      493,
      494,
      495,
      496,
      497,
      498,
      499,
      500
    ]
  },
  "final_params_for_optimized_backtest": {
    "fast_ma_type": "ema",
    "fast_ma_period": 20,
    "slow_ma_type": "sma",
    "slow_ma_period": 24
  },
  "performance_comparison": {
    "sharpe_ratio": {
      "default": 0.5063,
      "optimized": 1.0972,
      "improvement": "116.7%"
    },
    "total_return_percent": {
      "default": 5.0,
      "optimized": 5.0,
      "improvement": "0.0%"
    },
    "max_drawdown_percent": {
      "default": 10.0,
      "optimized": 10.0,
      "improvement": "0.0%"
    },
    "win_rate_percent": {
      "default": 50.0,
      "optimized": 50.0,
      "improvement": "0.0%"
    }
  },
  "parameter_changes": {
    "slow_ma_period": {
      "default": 50,
      "optimized": 24
    }
  },
  "top_results_summary": [
    {
      "rank": 1,
      "params": {
        "slow_ma_period": 24
      },
      "score": 1.0972
    },
    {
      "rank": 2,
      "params": {
        "slow_ma_period": 25
      },
      "score": 1.0941
    },
    {
      "rank": 3,
      "params": {
        "slow_ma_period": 26
      },
      "score": 0.9667
    }
  ]
}

{
  "timestamp": "2025-05-12 18:10:43",
  "strategy_type": "donchian_breakout",
  "param_ranges_request": {
    "period": "100 values from 1 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20"
}

{
  "timestamp": "2025-05-12 18:10:51",
  "strategy_type": "donchian_breakout",
  "param_ranges_request": {
    "period": "100 values from 1 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20",
  "params_sent_to_optimizer": {
    "period": [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100
    ]
  },
  "error": "'function' object has no attribute 'backtest'",
  "traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 923, in run_optimization_task\n    default_result = backtester.run_backtest(default_strategy, optimization_config.start_date, optimization_config.end_date)\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\backtesting\\backtester.py\", line 81, in run_backtest\n    backtest_results = strategy.backtest(data, self.initial_capital, self.commission)\nAttributeError: 'function' object has no attribute 'backtest'\n"
}

{
  "timestamp": "2025-05-12 18:11:03",
  "strategy_type": "macd_crossover",
  "param_ranges_request": {
    "slow_period": "100 values from 1 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20"
}

{
  "timestamp": "2025-05-12 18:11:10",
  "strategy_type": "macd_crossover",
  "param_ranges_request": {
    "slow_period": "100 values from 1 to 100"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20",
  "params_sent_to_optimizer": {
    "slow_period": [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100
    ]
  },
  "error": "'function' object has no attribute 'backtest'",
  "traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 923, in run_optimization_task\n    default_result = backtester.run_backtest(default_strategy, optimization_config.start_date, optimization_config.end_date)\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\backtesting\\backtester.py\", line 81, in run_backtest\n    backtest_results = strategy.backtest(data, self.initial_capital, self.commission)\nAttributeError: 'function' object has no attribute 'backtest'\n"
}

{
  "timestamp": "2025-05-12 18:11:24",
  "strategy_type": "macd_crossover",
  "param_ranges_request": {
    "fast_period": "50 values from 1 to 50"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20"
}

{
  "timestamp": "2025-05-12 18:11:29",
  "strategy_type": "macd_crossover",
  "param_ranges_request": {
    "fast_period": "50 values from 1 to 50"
  },
  "metric": "sharpe_ratio",
  "start_date": "2020-02-20",
  "end_date": "2025-02-20",
  "params_sent_to_optimizer": {
    "fast_period": [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50
    ]
  },
  "error": "'function' object has no attribute 'backtest'",
  "traceback": "Traceback (most recent call last):\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\app.py\", line 923, in run_optimization_task\n    default_result = backtester.run_backtest(default_strategy, optimization_config.start_date, optimization_config.end_date)\n  File \"C:\\Users\\ricar\\Desktop\\Python Works\\Analise_Grafica\\backtesting\\backtester.py\", line 81, in run_backtest\n    backtest_results = strategy.backtest(data, self.initial_capital, self.commission)\nAttributeError: 'function' object has no attribute 'backtest'\n"
}

